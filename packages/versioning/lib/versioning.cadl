import "../dist/src/versioning.js";

projection op#v {
  to(version) {
    if getAddedOn(self) > version {
      return never;
    } else if (getRemovedOn(self) <= version) {
      return never;
    } else {
      self.projectParameters(v, version);
      self.projectReturnType(v, version);
    };
  }
  from(version) {
    if getAddedOn(self) > version {
      return never;
    } else if (getRemovedOn(self) <= version) {
      return never;
    } else {
      self.projectParameters(v, version);
      self.projectReturnType(v, version);
    };
  }
}


projection interface#v {
  to(version) {
    if getAddedOn(self) > version {
      return never;
    } else if (getRemovedOn(self) <= version) {
      return never;
    } else {
      self.operations.forEach((operation) => {
        if getAddedOn(operation) > version {
          self.deleteOperation(operation.name);
        } else if getRemovedOn(operation) <= version {
          self.deleteOperation(operation.name);
        } else if getRenamedFromVersion(operation) > version {
          self.renameOperation(operation.name, getRenamedFromOldName(operation));
        } else {
          self.projectOperation(operation.name, v, version);
        };
      });
    };
  }
  from(version) {
    if getAddedOn(self) > version {
      return never;
    } else if (getRemovedOn(self) <= version) {
      return never;
    } else {
      self.projectionSource.operations.forEach((operation) => {
        if getAddedOn(operation) > version {
          self.addOperation(operation.name, operation.parameters, operation.returnType);
        } else if getRemovedOn(operation) <= version {
          self.addOperation(operation.name, operation.parameters, operation.returnType);
        } else if getRenamedFromVersion(operation) > version {
          self.renameOperation(getRenamedFromOldName(operation), operation.name);
        } else {
          self.projectOperation(operation.name, v, version);
        };
      });
    };
  }
}


projection union#v {
  to(version) {
    if getAddedOn(self) > version {
      return never;
    } else if (getRemovedOn(self) <= version) {
      return never;
    } else {
      self.variants.forEach((variant) => {
        if getAddedOn(variant) > version {
          self.deleteVariant(variant.name);
        } else if getRemovedOn(variant) <= version {
          self.deleteVariant(variant.name);
        } else if getRenamedFromVersion(variant) > version {
          self.renameVariant(variant.name, getRenamedFromOldName(variant));
        } else {
          self.projectVariant(variant.name, v, version);
        };
      });
    };
  }
  from(version) {
    if getAddedOn(self) > version {
      return never;
    } else if (getRemovedOn(self) <= version) {
      return never;
    } else {
      self.projectionSource.variants.forEach((variant) => {
        if getAddedOn(variant) > version {
          self.addVariant(variant.name, variant.type);
        } else if getRemovedOn(variant) <= version {
          self.addVariant(variant.name, variant.type);
        } else if getRenamedFromVersion(variant) > version {
          self.renameVariant(getRenamedFromOldName(variant), variant.name);
        } else {
          self.projectVariant(variant.name, v, version);
        };
      });
    };
  }
}

projection model#v {
  to(version) {
    if getAddedOn(self) > version {
      return never;
    } else if (getRemovedOn(self) <= version) {
      return never;
    } else {
      self.properties.forEach((p) => {
        if getAddedOn(p) > version {
          self.deleteProperty(p.name);
        } else if getRemovedOn(p) <= version {
          self.deleteProperty(p.name);
        } else if getRenamedFromVersion(p) > version {
          self.renameProperty(p.name, getRenamedFromOldName(p));
        } else {
          self.projectProperty(p.name, v, version);
        };
      });
    };
  }
  from(version) {
    if getAddedOn(self) > version {
      return never;
    } else if (getRemovedOn(self) <= version) {
      return never;
    } else {
      self.projectionSource.properties.forEach((p) => {
        if getAddedOn(p) > version {
          self.addProperty(p.name, p.type);
        } else if getRemovedOn(p) <= version {
          self.addProperty(p.name, p.type);
        } else if getRenamedFromVersion(p) > version {
          self.renameProperty(getRenamedFromOldName(p), p.name);
        } else {
          self.projectProperty(p.name, v, version);
        };
      });
    };
  }
}
